{"version":3,"sources":["components/CameraView/index.js","components/Three/model.js","components/Three/lights.js","App.js","index.js"],"names":["CameraView","props","webcamRef","useRef","canvasRef","style","position","marginLeft","marginRight","left","right","textAlign","zIndex","width","height","runPosenet","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","net","wrap","_context","prev","next","posenet","sent","console","log","setInterval","detect","stop","apply","this","arguments","drawPose","predictions","canvas","score","keypoints","mapJoints","forEach","point","x","y","beginPath","arc","Math","PI","fillStyle","fill","_ref2","_callee2","video","videoWidth","videoHeight","pose","_context2","current","readyState","estimateSinglePose","getContext","_x","react_default","createElement","react_webcam_default","ref","getAngle","p1","p2","c1","c2","m","atan2","normalize","min","max","val","getYRotation","p3","e1","abs","e2","getZRotation","Model","kp","group","_useGLTF","useGLTF","nodes","materials","useFrame","state","delta","getJoints","Ch36","skeleton","bones","rotation","z","assign","dispose","name","scale","object","mixamorig1Hips","geometry","material","Ch36_Body","preload","Lights","Fragment","intensity","castShadow","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","App","react_three_fiber_esm","colorManagement","shadowMap","camera","fov","lights","react","fallback","components_CameraView","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.4eaffdec.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport * as posenet from \"@tensorflow-models/posenet\";\r\nimport Webcam from \"react-webcam\";\r\n\r\nconst CameraView = (props) => {\r\n    const webcamRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n    const style={\r\n        position: \"absolute\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        left: 0,\r\n        right: 0,\r\n        textAlign: 'center',\r\n        zIndex: 9,\r\n        width: 320,\r\n        height: 240\r\n    }\r\n\r\n    const runPosenet = async () => {\r\n        const net = await posenet.load();\r\n        console.log(\"Posenet loaded\");\r\n        setInterval(()=>{\r\n            detect(net)\r\n        }, 100)\r\n    }\r\n\r\n    const drawPose = (predictions, canvas) => {\r\n        if(predictions.score > 0){\r\n            const keypoints = predictions.keypoints;\r\n            //console.log(keypoints)\r\n            props.mapJoints(keypoints)\r\n            keypoints.forEach((point)=>{\r\n                const x = point.position.x\r\n                const y = point.position.y\r\n                canvas.beginPath();\r\n                canvas.arc(x, y, 5, 0, 3 * Math.PI);\r\n                canvas.fillStyle = \"Indigo\";\r\n                canvas.fill();\r\n            })\r\n        }\r\n    }\r\n\r\n    const detect = async (net) => {\r\n        if (\r\n            typeof webcamRef.current !== \"undefined\" &&\r\n            webcamRef.current !== null && \r\n            webcamRef.current.video.readyState === 4\r\n        ){\r\n            const video = webcamRef.current.video;\r\n            const videoWidth = video.videoWidth;\r\n            const videoHeight = video.videoHeight;\r\n\r\n            webcamRef.current.video.width = videoWidth;\r\n            webcamRef.current.video.height = videoHeight;\r\n\r\n            canvasRef.current.width = videoWidth;\r\n            canvasRef.current.height = videoHeight;\r\n\r\n            const pose = await net.estimateSinglePose(video);\r\n            drawPose(pose, canvasRef.current.getContext(\"2d\"))\r\n        }\r\n\r\n    }\r\n\r\n    runPosenet();\r\n\r\n    return (\r\n        <div>\r\n            <Webcam ref={webcamRef} style={style}/>     \r\n            <canvas ref={canvasRef} style={style}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CameraView\r\n\r\n\r\n\r\n","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef } from 'react'\r\nimport { useFrame } from 'react-three-fiber';\r\nimport { useGLTF } from '@react-three/drei'\r\n\r\nconst CONFIDENCE = 0.3\r\n\r\nconst getAngle = (p1, p2, c1, c2, m) => {\r\n  if(p1['score'] > CONFIDENCE && p2['score'] > CONFIDENCE){\r\n    return (Math.atan2(p2['position']['y'] - p1['position']['y'], p2['position']['x'] - p1['position']['x']) + c1) * m;\r\n  }\r\n  return c2 * m\r\n}\r\n\r\nconst normalize = (min, max, val) => {\r\n  return ((val - min) / (max - min))* Math.PI;\r\n}\r\n\r\nconst getYRotation = (p1, p2, p3) => {\r\n  if(p1['score'] > CONFIDENCE && p2['score'] > CONFIDENCE && p3['score'] > CONFIDENCE){\r\n    let e1 = Math.abs(p1['position']['x'] - p3['position']['x'])\r\n    let e2 = Math.abs(p2['position']['x'] - p3['position']['x'])\r\n    return normalize(-100, 100, e2-e1) - Math.PI/2;\r\n  }\r\n  return 0\r\n}\r\n\r\nconst getZRotation = (p1, p2) => {\r\n  if(p1['score'] > CONFIDENCE && p2['score'] > CONFIDENCE){\r\n    let e1 = Math.abs(p1['position']['y'])\r\n    let e2 = Math.abs(p2['position']['y'] )\r\n    return normalize(-80, 80, e2-e1) - Math.PI/2;\r\n  }\r\n  return 0\r\n}\r\n\r\nexport default function Model(props) {\r\n  let kp;\r\n  const group = useRef()\r\n  const { nodes, materials } = useGLTF('model.glb')\r\n  console.log(nodes);\r\n  useFrame((state, delta) => {\r\n    kp = props.getJoints()\r\n    if (kp) {\r\n      // Left arm & elbow\r\n      nodes.Ch36.skeleton.bones[7].rotation.y = getAngle(kp[5], kp[7], 0, 0, -1)\r\n      nodes.Ch36.skeleton.bones[9].rotation.x = getAngle(kp[7], kp[9], 0, 0, 1)\r\n\r\n      //Right arm & elbow\r\n      nodes.Ch36.skeleton.bones[31].rotation.y = getAngle(kp[8], kp[6], 0, 0, -1)\r\n      nodes.Ch36.skeleton.bones[33].rotation.x = getAngle(kp[10], kp[8], 0, 0, -1)\r\n      \r\n      // Left leg & knee\r\n      nodes.Ch36.skeleton.bones[55].rotation.z =  getAngle(kp[11], kp[13], (Math.PI/2), Math.PI, -1)\r\n      //nodes.Ch36.skeleton.bones[56].rotation.z = getAngle(kp[15], kp[13], (Math.PI/2), 0, -1)\r\n\r\n      // Right leg & knee\r\n      nodes.Ch36.skeleton.bones[60].rotation.z =  getAngle(kp[12], kp[14], (Math.PI/2), Math.PI, -1)\r\n      //nodes.Ch36.skeleton.bones[61].rotation.z = getAngle(kp[16], kp[14], (Math.PI/2), 0, -1)\r\n\r\n      // Head\r\n      nodes.Ch36.skeleton.bones[5].rotation.y = getYRotation(kp[1], kp[2], kp[0])\r\n      nodes.Ch36.skeleton.bones[5].rotation.z = getZRotation(kp[1], kp[2])\r\n    }\r\n  })\r\n\r\n\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <group name=\"Armature\" rotation={[Math.PI / 2, 0, 0]} scale={[0.01, 0.01, 0.01]}>\r\n        <primitive object={nodes.mixamorig1Hips} />\r\n        <skinnedMesh geometry={nodes.Ch36.geometry} material={materials.Ch36_Body} skeleton={nodes.Ch36.skeleton} />\r\n      </group>\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload('model.glb')","import React from 'react'\r\n\r\nconst Lights = () => {\r\n    return (\r\n        <>\r\n            <ambientLight intensity={0.4} />\r\n            <directionalLight \r\n                castShadow \r\n                position={-8, 16, -8}\r\n                intensity={0}\r\n                shadow-mapSize-width={1024}\r\n                shadow-mapSize-height={1024}\r\n                shadow-camera-far={50}\r\n                shadow-camera-left={-10}\r\n                shadow-camera-right={10}\r\n                shadow-camera-top={10}\r\n                shadow-camera-bottom={-10} />\r\n            <pointLight position={[0,50,0]} intensity={2} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Lights","import React, { Suspense, useState } from 'react';\r\nimport CameraView from './components/CameraView';\r\nimport { Canvas } from 'react-three-fiber';\r\nimport Model from './components/Three/model.js';\r\nimport Lights from './components/Three/lights.js';\r\n\r\nfunction App() {\r\n  let kp;\r\n\r\n  const mapJoints = (keypoints) => {\r\n    kp = keypoints\r\n  }\r\n\r\n  const getJoints = () => {\r\n    return kp;\r\n  }\r\n\r\n  return (\r\n    <>\r\n    \r\n    <div style={{ position: \"relative\", width: 600, height: 600 }}>\r\n      \r\n      <Canvas\r\n        colorManagement\r\n        shadowMap\r\n        camera={{position: [0, 0, 2], fov: 60}}>\r\n          <Lights />\r\n          <Suspense fallback={null}>\r\n            <mesh position={[0,-1,0]}>\r\n              <Model getJoints={getJoints}/>\r\n            </mesh>\r\n          </Suspense>\r\n        </Canvas>\r\n    </div>\r\n    <CameraView mapJoints={mapJoints}/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />,document.getElementById('root'));"],"sourceRoot":""}